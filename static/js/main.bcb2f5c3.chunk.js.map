{"version":3,"sources":["hoc/asyncComponent.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["asyncComponent","importComponent","state","component","then","cmp","setState","default","C","this","props","Component","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Firebase","login","email","password","auth","signInWithEmailAndPassword","logout","signOut","app","initializeApp","db","firestore","name","createUserWithEmailAndPassword","currentUser","updateProfile","displayName","data","doc","uid","set","products","alert","product","collection","get","newProducts","push","merge","id","map","prod","console","log","splice","authUid","snap","forEach","clientID","shipment","delete","productID","status","ticket","Promise","res","onAuthStateChanged","shipments","tickets","bill","bills","fullName","SignUp","Login","Main","Client","App","firebaseInitialized","document","title","firebase","isInitialized","val","className","path","exact","from","to","CircularProgress","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","basename","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bcb2f5c3.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nconst asyncComponent = (importComponent) => {\n    return class extends Component  {\n        state = {\n            component: null\n        }\n\n        componentDidMount () {\n            importComponent()\n                .then((cmp) => {\n                this.setState({component: cmp.default});\n                });\n        }\n\n        render(){\n            const C = this.state.component;\n            return C ? <C {...this.props} /> : null;\n        }\n    }\n}\n\nexport default asyncComponent;","/* eslint-disable no-unused-vars */\n// import firebase from 'firebase';\nimport app from 'firebase/app';\nimport databse from 'firebase/database';\nimport 'firebase/auth';\nimport 'firebase/firestore';\n\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDLWOVsf0voqWAfaBSm2YV8Nc2vFjsWWeI\",\n  authDomain: \"odeliveryio2.firebaseapp.com\",\n  databaseURL: \"https://odeliveryio2.firebaseio.com\",\n  projectId: \"odeliveryio2\",\n  storageBucket: \"odeliveryio2.appspot.com\",\n  messagingSenderId: \"355804492158\",\n  appId: \"1:355804492158:web:f9cc73f6e54909cd6a432f\",\n  measurementId: \"G-7YSBSBFSGE\"\n}\n\nclass Firebase {\n    constructor() {\n      app.initializeApp(firebaseConfig);\n      // this.firebaseDB =  app.database().ref();\n      this.auth = app.auth();\n      this.db = app.firestore();\n      //this.firebaseDB = firebase.database().ref()\n    }\n  \n    login = (email, password) => this.auth.signInWithEmailAndPassword(email, password)\n  \n    logout = () => this.auth.signOut();\n  \n    async register(name, email, password){\n      await this.auth.createUserWithEmailAndPassword(email, password);\n      return this.auth.currentUser.updateProfile({\n        displayName: name\n      })\n    }\n  \n    addPersonalData(data) {\n      if (!this.auth.currentUser)\n        return alert('Not Authorized');\n      return this.db.doc(`users_personal_data/${this.auth.currentUser.uid}`).set({\n        data,\n        products: []\n      });\n    }\n\n    // -------------------- Product Functions -----------------------------\n\n    async addProduct (product) {\n      if (!this.auth.currentUser)\n        return alert('Not Authorized');\n      const doc = await this.db.collection('users_personal_data').doc(this.auth.currentUser.uid).get();\n      const products = doc.get('products');\n      const newProducts = [...products];\n      newProducts.push(product);\n      return this.db.collection('users_personal_data').doc(this.auth.currentUser.uid).set({\n        products: newProducts,\n      }, { merge: true });      \n    }\n\n    async editProduct (product, id) {\n      if (!this.auth.currentUser)\n        return alert('Not Authorized');\n      const doc = await this.db.collection('users_personal_data').doc(this.auth.currentUser.uid).get();\n      const products = doc.get('products');\n      const newProducts = products.map(prod => {\n        console.log(id);\n        if (prod.id === id){\n          console.log('found it');\n          return product;\n        }\n        return prod;\n      })\n      return this.db.doc(`users_personal_data/${this.auth.currentUser.uid}`).set({\n        products: newProducts\n      }, {merge: true});\n    }\n\n    async deleteProduct (id) {\n      if (!this.auth.currentUser)\n        return alert('Not Authorized');\n        const doc = await this.db.collection('users_personal_data').doc(this.auth.currentUser.uid).get();\n        const products = doc.get('products');\n        const newProducts = [...products];\n        newProducts.splice(id, 1);\n        return this.db.doc(`users_personal_data/${this.auth.currentUser.uid}`).set({\n          products: newProducts\n        }, {merge: true});\n    }\n\n    // --------------------------------------------------------------------\n\n    // -------------------- Shipment Functions ----------------------------\n\n    getShipments () {\n      const authUid = this.auth.currentUser.uid;\n      const shipments = this.db.collection('shipments')\n      .get()\n      .then(snap => {\n        const data = []\n        snap.forEach(doc => {\n          if(authUid === doc.data().clientID) {\n            data.push({...doc.data(), id: doc.id});\n          }\n        });\n        console.log(data);\n        return data;\n      });\n      return shipments;\n    }\n\n\n    async editShipment (shipment, id) {\n      if (!this.auth.currentUser)\n        return alert('Not Authorized');\n      return  await this.db.collection('shipments').doc(id).set({\n          ...shipment\n        }, { merge: true });\n    }\n\n    async addShipment (shipment) {\n      if (!this.auth.currentUser)\n        return alert('Not Authorized');\n      const doc = this.db.collection('shipments').doc();\n      return await doc.set({\n            ...shipment\n          }).then(() => {\n            return doc.id;\n          });\n    }\n\n\n    async deleteShipment (id) {\n      if (!this.auth.currentUser)\n        return alert('Not Authorized');\n      return await this.db.collection('shipments').doc(id).delete();\n    }\n\n    async deleteShipmentByProductID(id) {\n      if (!this.auth.currentUser)\n        return alert('Not Authorized');\n        const authUid = this.auth.currentUser.uid;\n        const shipments = await this.db.collection('shipments')\n        .get()\n        .then(snap => {\n          const data = []\n          snap.forEach(doc => {\n            if(authUid === doc.data().clientID && id === doc.data().productID && \n            doc.data().status === \"Preparing\") {\n              data.push(doc.id);\n            }\n          });\n          return data;\n        });\n        shipments.map(id => {\n          return this.db.collection('shipments').doc(id).delete();\n        });\n    }\n\n  // -------------------- Tickets Functions ----------------------------\n\n\n  async editTicket (ticket, id) {\n    if (!this.auth.currentUser)\n      return alert('Not Authorized');\n    return  await this.db.collection('tickets').doc(id).set({\n        ...ticket\n      });\n  }\n\n  async addTicket (ticket) {\n    if (!this.auth.currentUser)\n      return alert('Not Authorized');\n    return await this.db.collection('tickets').doc().set({\n          ...ticket\n        });\n  }\n\n\n  async deleteTicket (id) {\n    if (!this.auth.currentUser)\n      return alert('Not Authorized');\n    return await this.db.collection('tickets').doc(id).delete();\n  }\n\n    // -------------------------- User Functions ------------------------------------------\n\n    isInitialized () {\n      return new Promise(res => {\n        this.auth.onAuthStateChanged(res);\n      });\n    }\n\n    getCurrentUsername() {\n      return this.auth.currentUser && this.auth.currentUser.displayName;\n    }\n  \n    async getCurrentUserData () {\n      const authUid = this.auth.currentUser.uid;\n      const doc = await this.db.collection('users_personal_data').doc(authUid).get();\n      const data = doc.get('data');\n      const products = doc.get('products');\n      /*const shipments = await this.db.collection('shipments').onSnapshot(snap => {\n          const data = []\n          snap.forEach(doc => {\n            console.log(doc.data());\n            if(authUid === doc.data().clientID) {\n              data.push({...doc.data(), id: doc.id});\n            }\n          });\n          console.log(\"TestDone\");\n          return data;\n      });*/\n      const shipments = await this.db.collection('shipments').get()\n      .then(snap => {\n        const data = []\n        snap.forEach(doc => {\n          console.log(doc.data());\n          if(authUid === doc.data().clientID) {\n            data.push({...doc.data(), id: doc.id});\n          }\n        });\n        return data;\n      });\n      const tickets = await this.db.collection('tickets')\n      .get()\n      .then(snap => {\n        const data = []\n        snap.forEach(doc => {\n          data.push({...doc.data(), id: doc.id});\n        });\n        return data;\n      });\n      const bills = await this.db.collection('bills')\n      .get()\n      .then(snap => {\n        const data = [];\n        snap.forEach(bill => {\n          data.push({...bill.data(), id: bill.id})\n        });\n        return data;\n      })\n      return {\n        id: doc.id,\n        data: {...data, fullName: this.auth.currentUser.displayName},\n        products: [...products],\n        shipments: [...shipments],\n        tickets: [...tickets],\n        bills: [...bills]\n\n      };\n    }\n}\n  \nexport default new Firebase();\n\n/*\nfunction CRUD:\nREAD : firebaseDb.child('contact').on('value', snapshot => {\n            // console.log(snapshot.val());\n            if(snapshot.val() !== null)\n            {\n                setContactObjects({\n                    ...snapshot.val()\n                })\n            }\n            else\n                setContactObjects({});\n        });\nCREATE: firebaseDb.child('contact').push(\n                obj,\n                err => {\n                    if(err)\n                        console.log(err);\n                    else\n                        setCurretID('');\n                }\n            )\nUPDATE: firebaseDb.child(`contact/${curretID}`).set(\n                obj,\n                err => {\n                    if(err)\n                        console.log(err);\n                    else\n                        setCurretID('');\n                }\n            )\nDELETE: if(window.confirm('Are you sure you want to delete that?'))\n            firebaseDb.child(`contact/${key}`).remove(\n                err => {\n                    if(err)\n                        console.log(err);\n                    else\n                        setCurretID('');\n                }\n            ) \n*/","import React, {Component} from 'react';\nimport './App.css';\nimport asyncComponent from './hoc/asyncComponent';\nimport { Route, Switch } from 'react-router-dom';\nimport { CircularProgress } from '@material-ui/core';\nimport firebase from './firebase';\nimport { Redirect } from 'react-router-dom/cjs/react-router-dom.min';\n\nconst SignUp = asyncComponent(() => {\n  return import('./Containers/SignUp/Signup')\n});\n\nconst Login = asyncComponent(() => {\n  return import('./Containers/Login/Login')\n});\n\nconst Main = asyncComponent(() => {\n  return import('./Containers/Main/Main')\n});\n\nconst Client = asyncComponent(() => {\n  return import('./Containers/Client/Client')\n});\n\n\n\n\nclass App extends Component{\n\n  state = {\n    firebaseInitialized: false  \n  }\n  componentDidMount(){\n    document.title = 'Odelivery';\n    firebase.isInitialized().then(val => {\n\t\t\tthis.setState({firebaseInitialized: val})\n\t\t})\n  }\n\n  render() {\n    return this.state.firebaseInitialized !== false ? (\n          <div className=\"App\">\n          <Switch>\n              <Route path=\"/signup\" exact component={SignUp} />\n              <Route path=\"/login\" exact component={Login} /> \n              <Route path=\"/main\" component={Main} />\n              <Route path=\"/admin\" component={Client} />\n              <Route path=\"/livreur\" component={Client} />\n              <Route path=\"/client\" component={Client} />\n            </Switch>\n            <Redirect from=\"/\" to=\"/main\" />\n          </div>\n    ): <div id=\"loader\"><CircularProgress /></div>;\n  }  \n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename=\"/odelivery/\">\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}